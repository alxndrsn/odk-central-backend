#!/bin/bash -eux
set -o pipefail

log() { echo "[test/db-partial-migrations/prepare] $*"; }

if ! [[ "$(git status --porcelain)" = "" ]]; then
  log "!!!"
  log "!!! You have uncomitted changes in your local git repo."
  log "!!!"
  log "!!! This command will make destructive changes."
  log "!!!"
  log "!!! Please revert or commit these changes before continuing."
  log "!!!"
  exit 1
fi

show_migrations() {
  tree lib/model/migrations # TODO reinstate
}

prerun="$1"
log "Requested for prerun: $prerun"

migrations_legacy=./lib/model/migrations/legacy
migrations_new=./lib/model/migrations

rmExceptFirst() {
  local skipCount="$1"
  local src="$2"
  find "$src" -maxdepth 1 -type f -name \*.js -printf '%p\n' |
      sort |
      tail -n +$((skipCount+1)) |
      xargs rm
}

log "Re-arranging migrations..."
case "$prerun" in
  none)
    rm "$migrations_new"/*.js
    rm "$migrations_legacy"/*.js
    ;;
  legacy-all)
    rm "$migrations_new"/*.js
    ;;
  legacy-first-*)
    rm "$migrations_new"/*.js
    rmExceptFirst "$(sed s/legacy-first-// <<<"$prerun")" "$migrations_legacy"
    ;;
  new-first-*-as-legacy)
    rmExceptFirst "$(sed s/new-first-\(.*\)-as-legacy/\1/ <<<"$prerun")" "$migrations_new"
    sed -E -i -e "s/db\.query/db.raw/" -- "$migrations_new"/*.js
    ;;
  *)
    log "!!!"
    log "!!! No rule found matching '$prerun'"
    log "!!!"
    exit 1
    ;;
esac
sed -i s/db\.query/db\.raw/ -- "$migrations_new"/*.js
log "Initial migrations structure:"
show_migrations

make migrations-legacy

log "Re-instating unrun migrations..."
git reset --hard

log "Final migrations structure:"
show_migrations

log "Completed OK."
